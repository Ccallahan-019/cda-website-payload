/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    newsPost: NewsPost;
    users: User;
    page: Page;
    contact: Contact;
    diocese: Diocese;
    event: Event;
    project: Project;
    charity: Charity;
    fundraiser: Fundraiser;
    localCourt: LocalCourt;
    newsletter: Newsletter;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    newsPost: NewsPostSelect<false> | NewsPostSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    page: PageSelect<false> | PageSelect<true>;
    contact: ContactSelect<false> | ContactSelect<true>;
    diocese: DioceseSelect<false> | DioceseSelect<true>;
    event: EventSelect<false> | EventSelect<true>;
    project: ProjectSelect<false> | ProjectSelect<true>;
    charity: CharitySelect<false> | CharitySelect<true>;
    fundraiser: FundraiserSelect<false> | FundraiserSelect<true>;
    localCourt: LocalCourtSelect<false> | LocalCourtSelect<true>;
    newsletter: NewsletterSelect<false> | NewsletterSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    contactForm: ContactForm;
    footer: Footer;
    header: Header;
    background: Background;
  };
  globalsSelect: {
    contactForm: ContactFormSelect<false> | ContactFormSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    header: HeaderSelect<false> | HeaderSelect<true>;
    background: BackgroundSelect<false> | BackgroundSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsPost".
 */
export interface NewsPost {
  id: number;
  title: string;
  /**
   * Write a short description of the news post.
   */
  description: string;
  referenceType?: ('new' | 'existing') | null;
  referenceTo?:
    | ({
        relationTo: 'charity';
        value: number | Charity;
      } | null)
    | ({
        relationTo: 'fundraiser';
        value: number | Fundraiser;
      } | null)
    | ({
        relationTo: 'event';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'localCourt';
        value: number | LocalCourt;
      } | null)
    | ({
        relationTo: 'page';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'project';
        value: number | Project;
      } | null);
  /**
   * This will be postfix to the news url (as in, cda-pa.org/news/<slug>) and will create a new page corresponding to this news post. You only need to include the postfix, i.e. donation-form-change. Lowercase and dashes only, no special characters.
   */
  slug?: string | null;
  heroImage?: (number | null) | Media;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  relatedNewsPosts?: (number | NewsPost)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "charity".
 */
export interface Charity {
  id: number;
  charityName: string;
  /**
   * Write a short description of the charity.
   */
  charityDescription: string;
  charityType: 'national' | 'state' | 'local';
  associatedCourt?: (number | null) | LocalCourt;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * This will be the postfix to the charities url (as in, cda-pa.org/charities/<slug>) and will create a new page corresponding to this charity. You only need to include the postfix, i.e. charity-name. Lowercase and dashes only, no special characters. If you do not fill this field in, a slug will be assigned based on the charity's name.
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "localCourt".
 */
export interface LocalCourt {
  id: number;
  courtName: string;
  courtDiocese: number | Diocese;
  courtNumber: number;
  instituted: string;
  courtWebsite?: string | null;
  courtLocation?: {
    courtAddress?: string | null;
    courtCity?: string | null;
    courtState?: string | null;
    courtZipcode?: string | null;
  };
  courtPhoneNumber?: string | null;
  /**
   * These fields have been pre-filtered to only include contacts whose 'type' is 'local'.
   */
  courtOfficers?: {
    courtRegent?: (number | null) | Contact;
    courtViceRegent?: (number | null) | Contact;
    courtRecordingSecretary?: (number | null) | Contact;
    courtFinancialSecretary?: (number | null) | Contact;
    courtTreasurer?: (number | null) | Contact;
  };
  /**
   * As long as this court has been saved, this field has been pre-filtered to only include newsletters that have been associated with this court.
   */
  courtNewsletters?: (number | Newsletter)[] | null;
  /**
   * As long as this court has been saved, this field has been pre-filtered to only include events that have been associated with this court.
   */
  courtEvents?: (number | Event)[] | null;
  /**
   * As long as this court has been saved, this field has been pre-filtered to only include projects that have been associated with this court.
   */
  courtProjects?: (number | Project)[] | null;
  /**
   * As long as this court has been saved, this field has been pre-filtered to only include charities that have been associated with this court.
   */
  courtCharities?: (number | Charity)[] | null;
  /**
   * As long as this court has been saved, this field has been pre-filtered to only include fundraisers that have been associated with this court.
   */
  courtFundraisers?: (number | Fundraiser)[] | null;
  heroImage?: (number | null) | Media;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * This will be the postfix to the courts url (as in, cda-pa.org/courts/<slug>) and will create a new page corresponding to this court. You only need to include the postfix, i.e. columbia. Lowercase and dashes only, no special characters. If you do not fill this field in, a slug will be assigned based on the court's name.
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "diocese".
 */
export interface Diocese {
  id: number;
  dioceseName: string;
  dioceseWebsite?: string | null;
  dioceseLocation?: {
    dioceseAddress?: string | null;
    dioceseCity?: string | null;
    dioceseState?: string | null;
    dioceseZipcode?: string | null;
  };
  diocesePhoneNumber?: string | null;
  /**
   * This field has been pre-filtered to only allow access to contacts that have designated as a District Deputy in the "Contact Positions" field.
   */
  districtDeputies: {
    deputy: number | Contact;
    id?: string | null;
  }[];
  dioceseEvents?:
    | {
        event: number | Event;
        id?: string | null;
      }[]
    | null;
  info?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact".
 */
export interface Contact {
  id: number;
  contactName: string;
  contactEmail?: string | null;
  contactImage?: (number | null) | Media;
  /**
   * List the roles this contact fills.
   */
  contactRoles: {
    role?: string | null;
    id?: string | null;
  }[];
  /**
   * Choose what position(s) this contact falls under. More than one can be selected.
   */
  contactPositions?: {
    officer?: boolean | null;
    chairman?: boolean | null;
    districtDeputy?: boolean | null;
  };
  /**
   * Choose the scope of this contact. If they are an officer, use their scope as an officer; if not, they are most likely "State", i.e. chairmen who are not officers.
   */
  contactType: 'national' | 'state' | 'local';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event".
 */
export interface Event {
  id: number;
  eventName: string;
  eventDate: string;
  eventDescription: string;
  eventType: 'national' | 'state' | 'local' | 'diocesan';
  associatedCourt?: (number | null) | LocalCourt;
  associatedDiocese?: (number | null) | LocalCourt;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedEvents?: (number | Event)[] | null;
  /**
   * This will be the postfix to the events url (as in, cda-pa.org/events/<slug>) and will create a new page corresponding to this event. You only need to include the postfix, i.e. state-convention-2023. Lowercase and dashes only, no special characters. If you do not fill this field in, a slug will be assigned based on the events's name.
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter".
 */
export interface Newsletter {
  id: number;
  title: string;
  yearOfRelease: number;
  quarter?: string | null;
  type: 'local' | 'state' | 'national';
  reissueDate?: string | null;
  associatedCourt?: (number | null) | LocalCourt;
  displayTitle?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project".
 */
export interface Project {
  id: number;
  projectName: string;
  /**
   * Write a short description of the project.
   */
  projectDescription: string;
  projectType: 'national' | 'state' | 'local';
  associatedCourt?: (number | null) | LocalCourt;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * This will be the postfix to the project url (as in, cda-pa.org/projects/<slug>) and will create a new page corresponding to this project. You only need to include the postfix, i.e. courage-lion. Lowercase and dashes only, no special characters. If you do not fill this field in, a slug will be assigned based on the project's name.
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fundraiser".
 */
export interface Fundraiser {
  id: number;
  fundraiserName: string;
  /**
   * Write a short description of the fundraiser.
   */
  fundraiserDescription: string;
  fundraiserType: 'national' | 'state' | 'local';
  associatedCourt?: (number | null) | LocalCourt;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * This will be the postfix to the fundraiser url (as in, cda-pa.org/fundraisers/<slug>) and will create a new page corresponding to this fundraiser. You only need to include the postfix, i.e. lucky-lottery-calendar. Lowercase and dashes only, no special characters. If you do not fill this field in, a slug will be assigned based on the fundraiser's name.
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    media?: (number | null) | Media;
    includeButton?: boolean | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: (number | null) | Page;
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost' | 'destructive' | 'link' | 'secondary') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  layout?:
    | (
        | ContentBlock
        | StatsBarBlock
        | SideBarBlock
        | ContactCardsBlock
        | TabsBlock
        | NewsPostsBlock
        | CourtListingBlock
        | CalendarBlock
        | MediaWithTextBlock
        | SliderBlock
        | NewslettersBlock
        | DiocesesAccordianBlock
        | ArchiveBlock
        | MediaBlock
      )[]
    | null;
  /**
   * This is the postfix to the domain name, i.e. cda-pa.org/<slug>.
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatsBarBlock".
 */
export interface StatsBarBlock {
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  stats: {
    statNumber: number;
    statPostfix?: string | null;
    statDescription?: string | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'statsBar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SideBarBlock".
 */
export interface SideBarBlock {
  sections: {
    sectionHeading: string;
    sectionRichText: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    id?: string | null;
  }[];
  alignment: 'left' | 'right';
  id?: string | null;
  blockName?: string | null;
  blockType: 'sideBar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactCardsBlock".
 */
export interface ContactCardsBlock {
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  contactsToList: {
    contactToList: number | Contact;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock".
 */
export interface TabsBlock {
  tabs: {
    tabLabel: string;
    tabContent?: (ContactCardsBlock | ContentBlock)[] | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'tabs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsPostsBlock".
 */
export interface NewsPostsBlock {
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  posts: {
    post?: (number | null) | NewsPost;
    id?: string | null;
  }[];
  pagination: boolean;
  rowsPerPage?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'newsPosts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourtListingBlock".
 */
export interface CourtListingBlock {
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  selectionType: 'all' | 'diocese' | 'manual';
  /**
   * Select the courts you would like to include in the listing; you may choose up to 20 courts. If you do not select any courts, the listing will default to displaying every court.
   */
  selectedCourts?: (number | LocalCourt)[] | null;
  /**
   * Select the diocese you would like to filter the listing by. If you do not select a diocese, the listing will default to displaying every court.
   */
  selectedDiocese?: (number | null) | Diocese;
  rowsPerPage: number;
  id?: string | null;
  blockName?: string | null;
  blockType: 'courtListing';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CalendarBlock".
 */
export interface CalendarBlock {
  intro: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  months: {
    title: string;
    monthItems?:
      | {
          item?: string | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'calendar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaWithTextBlock".
 */
export interface MediaWithTextBlock {
  mediaSize?: ('oneThird' | 'half' | 'twoThirds') | null;
  mediaAlignment?: ('left' | 'right') | null;
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaWithText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SliderBlock".
 */
export interface SliderBlock {
  intro?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  slides: {
    slideContent: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'slider';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewslettersBlock".
 */
export interface NewslettersBlock {
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  newsletters: {
    newsletter: number | Newsletter;
    id?: string | null;
  }[];
  downloadImage: number | Media;
  dropdownIcon?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'newsletters';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DiocesesAccordianBlock".
 */
export interface DiocesesAccordianBlock {
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  dioceses: (number | Diocese)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'diocesesAccordian';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  collection: 'event' | 'project' | 'charity' | 'fundraiser';
  type: 'national' | 'state' | 'local';
  autoPopulate?: boolean | null;
  limit?: number | null;
  selectedDocs?:
    | (
        | {
            relationTo: 'event';
            value: number | Event;
          }
        | {
            relationTo: 'charity';
            value: number | Charity;
          }
        | {
            relationTo: 'fundraiser';
            value: number | Fundraiser;
          }
        | {
            relationTo: 'project';
            value: number | Project;
          }
      )[]
    | null;
  entriesPerPage?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'newsPost';
        value: number | NewsPost;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'page';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'contact';
        value: number | Contact;
      } | null)
    | ({
        relationTo: 'diocese';
        value: number | Diocese;
      } | null)
    | ({
        relationTo: 'event';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'project';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'charity';
        value: number | Charity;
      } | null)
    | ({
        relationTo: 'fundraiser';
        value: number | Fundraiser;
      } | null)
    | ({
        relationTo: 'localCourt';
        value: number | LocalCourt;
      } | null)
    | ({
        relationTo: 'newsletter';
        value: number | Newsletter;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsPost_select".
 */
export interface NewsPostSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  referenceType?: T;
  referenceTo?: T;
  slug?: T;
  heroImage?: T;
  content?: T;
  relatedNewsPosts?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page_select".
 */
export interface PageSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        media?: T;
        includeButton?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
  layout?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
        statsBar?: T | StatsBarBlockSelect<T>;
        sideBar?: T | SideBarBlockSelect<T>;
        contactCards?: T | ContactCardsBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        newsPosts?: T | NewsPostsBlockSelect<T>;
        courtListing?: T | CourtListingBlockSelect<T>;
        calendar?: T | CalendarBlockSelect<T>;
        mediaWithText?: T | MediaWithTextBlockSelect<T>;
        slider?: T | SliderBlockSelect<T>;
        newsletters?: T | NewslettersBlockSelect<T>;
        diocesesAccordian?: T | DiocesesAccordianBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
      };
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatsBarBlock_select".
 */
export interface StatsBarBlockSelect<T extends boolean = true> {
  richText?: T;
  stats?:
    | T
    | {
        statNumber?: T;
        statPostfix?: T;
        statDescription?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SideBarBlock_select".
 */
export interface SideBarBlockSelect<T extends boolean = true> {
  sections?:
    | T
    | {
        sectionHeading?: T;
        sectionRichText?: T;
        id?: T;
      };
  alignment?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactCardsBlock_select".
 */
export interface ContactCardsBlockSelect<T extends boolean = true> {
  richText?: T;
  contactsToList?:
    | T
    | {
        contactToList?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock_select".
 */
export interface TabsBlockSelect<T extends boolean = true> {
  tabs?:
    | T
    | {
        tabLabel?: T;
        tabContent?:
          | T
          | {
              contactCards?: T | ContactCardsBlockSelect<T>;
              content?: T | ContentBlockSelect<T>;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsPostsBlock_select".
 */
export interface NewsPostsBlockSelect<T extends boolean = true> {
  richText?: T;
  posts?:
    | T
    | {
        post?: T;
        id?: T;
      };
  pagination?: T;
  rowsPerPage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourtListingBlock_select".
 */
export interface CourtListingBlockSelect<T extends boolean = true> {
  richText?: T;
  selectionType?: T;
  selectedCourts?: T;
  selectedDiocese?: T;
  rowsPerPage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CalendarBlock_select".
 */
export interface CalendarBlockSelect<T extends boolean = true> {
  intro?: T;
  months?:
    | T
    | {
        title?: T;
        monthItems?:
          | T
          | {
              item?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaWithTextBlock_select".
 */
export interface MediaWithTextBlockSelect<T extends boolean = true> {
  mediaSize?: T;
  mediaAlignment?: T;
  richText?: T;
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SliderBlock_select".
 */
export interface SliderBlockSelect<T extends boolean = true> {
  intro?: T;
  slides?:
    | T
    | {
        slideContent?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewslettersBlock_select".
 */
export interface NewslettersBlockSelect<T extends boolean = true> {
  richText?: T;
  newsletters?:
    | T
    | {
        newsletter?: T;
        id?: T;
      };
  downloadImage?: T;
  dropdownIcon?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DiocesesAccordianBlock_select".
 */
export interface DiocesesAccordianBlockSelect<T extends boolean = true> {
  richText?: T;
  dioceses?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  collection?: T;
  type?: T;
  autoPopulate?: T;
  limit?: T;
  selectedDocs?: T;
  entriesPerPage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact_select".
 */
export interface ContactSelect<T extends boolean = true> {
  contactName?: T;
  contactEmail?: T;
  contactImage?: T;
  contactRoles?:
    | T
    | {
        role?: T;
        id?: T;
      };
  contactPositions?:
    | T
    | {
        officer?: T;
        chairman?: T;
        districtDeputy?: T;
      };
  contactType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "diocese_select".
 */
export interface DioceseSelect<T extends boolean = true> {
  dioceseName?: T;
  dioceseWebsite?: T;
  dioceseLocation?:
    | T
    | {
        dioceseAddress?: T;
        dioceseCity?: T;
        dioceseState?: T;
        dioceseZipcode?: T;
      };
  diocesePhoneNumber?: T;
  districtDeputies?:
    | T
    | {
        deputy?: T;
        id?: T;
      };
  dioceseEvents?:
    | T
    | {
        event?: T;
        id?: T;
      };
  info?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event_select".
 */
export interface EventSelect<T extends boolean = true> {
  eventName?: T;
  eventDate?: T;
  eventDescription?: T;
  eventType?: T;
  associatedCourt?: T;
  associatedDiocese?: T;
  heroImage?: T;
  content?: T;
  relatedEvents?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project_select".
 */
export interface ProjectSelect<T extends boolean = true> {
  projectName?: T;
  projectDescription?: T;
  projectType?: T;
  associatedCourt?: T;
  heroImage?: T;
  content?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "charity_select".
 */
export interface CharitySelect<T extends boolean = true> {
  charityName?: T;
  charityDescription?: T;
  charityType?: T;
  associatedCourt?: T;
  heroImage?: T;
  content?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fundraiser_select".
 */
export interface FundraiserSelect<T extends boolean = true> {
  fundraiserName?: T;
  fundraiserDescription?: T;
  fundraiserType?: T;
  associatedCourt?: T;
  heroImage?: T;
  content?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "localCourt_select".
 */
export interface LocalCourtSelect<T extends boolean = true> {
  courtName?: T;
  courtDiocese?: T;
  courtNumber?: T;
  instituted?: T;
  courtWebsite?: T;
  courtLocation?:
    | T
    | {
        courtAddress?: T;
        courtCity?: T;
        courtState?: T;
        courtZipcode?: T;
      };
  courtPhoneNumber?: T;
  courtOfficers?:
    | T
    | {
        courtRegent?: T;
        courtViceRegent?: T;
        courtRecordingSecretary?: T;
        courtFinancialSecretary?: T;
        courtTreasurer?: T;
      };
  courtNewsletters?: T;
  courtEvents?: T;
  courtProjects?: T;
  courtCharities?: T;
  courtFundraisers?: T;
  heroImage?: T;
  content?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter_select".
 */
export interface NewsletterSelect<T extends boolean = true> {
  title?: T;
  yearOfRelease?: T;
  quarter?: T;
  type?: T;
  reissueDate?: T;
  associatedCourt?: T;
  displayTitle?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contactForm".
 */
export interface ContactForm {
  id: number;
  emailHeading: string;
  contactName: string;
  contactEmail: string;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  nameLabel: string;
  namePlaceholder: string;
  emailLabel: string;
  emailPlaceholder: string;
  phoneLabel: string;
  phonePlaceholder: string;
  messageLabel: string;
  messagePlaceholder: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  logo: number | Media;
  title: string;
  text?: string | null;
  socialMediaIcons?:
    | {
        icon: number | Media;
        link: string;
        id?: string | null;
      }[]
    | null;
  linksHeading: string;
  links: {
    link: number | Page;
    id?: string | null;
  }[];
  copyrightText: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems: {
    title?: string | null;
    description?: string | null;
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?: (number | null) | Page;
      url?: string | null;
      label: string;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline' | 'ghost' | 'destructive' | 'link' | 'secondary') | null;
    };
    subNav?:
      | {
          title: string;
          links?:
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?: (number | null) | Page;
                  url?: string | null;
                  label: string;
                  /**
                   * Choose how the link should be rendered.
                   */
                  appearance?: ('default' | 'outline' | 'ghost' | 'destructive' | 'link' | 'secondary') | null;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  logo: number | Media;
  menuIcon: number | Media;
  closeIcon: number | Media;
  subMenuIcon: number | Media;
  backIcon: number | Media;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "background".
 */
export interface Background {
  id: number;
  backgroundMedia: number | Media;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contactForm_select".
 */
export interface ContactFormSelect<T extends boolean = true> {
  emailHeading?: T;
  contactName?: T;
  contactEmail?: T;
  text?: T;
  nameLabel?: T;
  namePlaceholder?: T;
  emailLabel?: T;
  emailPlaceholder?: T;
  phoneLabel?: T;
  phonePlaceholder?: T;
  messageLabel?: T;
  messagePlaceholder?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  title?: T;
  text?: T;
  socialMediaIcons?:
    | T
    | {
        icon?: T;
        link?: T;
        id?: T;
      };
  linksHeading?: T;
  links?:
    | T
    | {
        link?: T;
        id?: T;
      };
  copyrightText?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        title?: T;
        description?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        subNav?:
          | T
          | {
              title?: T;
              links?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                          appearance?: T;
                        };
                    id?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  logo?: T;
  menuIcon?: T;
  closeIcon?: T;
  subMenuIcon?: T;
  backIcon?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "background_select".
 */
export interface BackgroundSelect<T extends boolean = true> {
  backgroundMedia?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'newsPost';
          value: number | NewsPost;
        } | null)
      | ({
          relationTo: 'page';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'event';
          value: number | Event;
        } | null)
      | ({
          relationTo: 'project';
          value: number | Project;
        } | null)
      | ({
          relationTo: 'charity';
          value: number | Charity;
        } | null)
      | ({
          relationTo: 'fundraiser';
          value: number | Fundraiser;
        } | null)
      | ({
          relationTo: 'localCourt';
          value: number | LocalCourt;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}