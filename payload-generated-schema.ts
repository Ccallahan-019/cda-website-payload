/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  timestamp,
  numeric,
  integer,
  jsonb,
  text,
  boolean,
  type AnyPgColumn,
  pgEnum,
} from "@payloadcms/db-vercel-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-vercel-postgres/drizzle";
export const enum_page_blocks_content_columns_size = pgEnum(
  "enum_page_blocks_content_columns_size",
  ["oneThird", "half", "twoThirds", "full"],
);
export const enum_page_hero_type = pgEnum("enum_page_hero_type", [
  "none",
  "highImpact",
  "lowImpact",
]);
export const enum_contact_contact_type = pgEnum("enum_contact_contact_type", [
  "national",
  "state",
  "local",
]);
export const enum_event_event_type = pgEnum("enum_event_event_type", [
  "national",
  "state",
  "local",
  "diocesan",
]);
export const enum_project_project_type = pgEnum("enum_project_project_type", [
  "national",
  "state",
  "local",
]);
export const enum_charity_charity_type = pgEnum("enum_charity_charity_type", [
  "national",
  "state",
  "local",
]);
export const enum_fundraiser_fundraiser_type = pgEnum(
  "enum_fundraiser_fundraiser_type",
  ["national", "state", "local"],
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const news_post = pgTable(
  "news_post",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description").notNull(),
    link: integer("link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    linkText: varchar("link_text"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    news_post_link_idx: index("news_post_link_idx").on(columns.link),
    news_post_updated_at_idx: index("news_post_updated_at_idx").on(
      columns.updatedAt,
    ),
    news_post_created_at_idx: index("news_post_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const page_blocks_content_columns = pgTable(
  "page_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    size: enum_page_blocks_content_columns_size("size").default("oneThird"),
    richText: jsonb("rich_text"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_content_columns_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_content_columns_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_content.id],
      name: "page_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_content = pgTable(
  "page_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("page_blocks_content_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_stats_bar_stats = pgTable(
  "page_blocks_stats_bar_stats",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    statNumber: numeric("stat_number").notNull(),
    statPostfix: varchar("stat_postfix"),
    statDescription: varchar("stat_description"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_stats_bar_stats_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_stats_bar_stats_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_stats_bar.id],
      name: "page_blocks_stats_bar_stats_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_stats_bar = pgTable(
  "page_blocks_stats_bar",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    richText: jsonb("rich_text").notNull(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_stats_bar_order_idx").on(columns._order),
    _parentIDIdx: index("page_blocks_stats_bar_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_stats_bar_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_stats_bar_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_side_bar_sections = pgTable(
  "page_blocks_side_bar_sections",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    sectionHeading: varchar("section_heading").notNull(),
    sectionRichText: jsonb("section_rich_text").notNull(),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_side_bar_sections_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_side_bar_sections_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_side_bar.id],
      name: "page_blocks_side_bar_sections_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_side_bar = pgTable(
  "page_blocks_side_bar",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_side_bar_order_idx").on(columns._order),
    _parentIDIdx: index("page_blocks_side_bar_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_side_bar_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_side_bar_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_page_heading_block = pgTable(
  "page_blocks_page_heading_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    heading: varchar("heading"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_page_heading_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_page_heading_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_page_heading_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_page_heading_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_hero_banner_block = pgTable(
  "page_blocks_hero_banner_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    heroText: jsonb("hero_text").notNull(),
    heroImage: integer("hero_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    link: integer("link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_hero_banner_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_hero_banner_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_hero_banner_block_path_idx").on(columns._path),
    page_blocks_hero_banner_block_hero_image_idx: index(
      "page_blocks_hero_banner_block_hero_image_idx",
    ).on(columns.heroImage),
    page_blocks_hero_banner_block_link_idx: index(
      "page_blocks_hero_banner_block_link_idx",
    ).on(columns.link),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_hero_banner_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_news_postings_block_posts = pgTable(
  "page_blocks_news_postings_block_posts",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    post: integer("post_id").references(() => news_post.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_news_postings_block_posts_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "page_blocks_news_postings_block_posts_parent_id_idx",
    ).on(columns._parentID),
    page_blocks_news_postings_block_posts_post_idx: index(
      "page_blocks_news_postings_block_posts_post_idx",
    ).on(columns.post),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_news_postings_block.id],
      name: "page_blocks_news_postings_block_posts_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_news_postings_block = pgTable(
  "page_blocks_news_postings_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_news_postings_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_news_postings_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_news_postings_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_news_postings_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_rich_text_block = pgTable(
  "page_blocks_rich_text_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    richTextTitle: varchar("rich_text_title"),
    text: jsonb("text").notNull(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_rich_text_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_rich_text_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_rich_text_block_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_rich_text_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_stats_block_stats = pgTable(
  "page_blocks_stats_block_stats",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    statNumber: numeric("stat_number").notNull(),
    statPostfix: varchar("stat_postfix"),
    statDescription: varchar("stat_description"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_stats_block_stats_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_stats_block_stats_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_stats_block.id],
      name: "page_blocks_stats_block_stats_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_stats_block = pgTable(
  "page_blocks_stats_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    statsTitle: varchar("stats_title").notNull(),
    statsDescription: varchar("stats_description"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_stats_block_order_idx").on(columns._order),
    _parentIDIdx: index("page_blocks_stats_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_stats_block_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_stats_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_district_deputies_block = pgTable(
  "page_blocks_district_deputies_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    diocese: integer("diocese_id")
      .notNull()
      .references(() => diocese.id, {
        onDelete: "set null",
      }),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_district_deputies_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_district_deputies_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_district_deputies_block_path_idx").on(
      columns._path,
    ),
    page_blocks_district_deputies_block_diocese_idx: index(
      "page_blocks_district_deputies_block_diocese_idx",
    ).on(columns.diocese),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_district_deputies_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_state_officers_block_contacts = pgTable(
  "page_blocks_state_officers_block_contacts",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    contact: integer("contact_id").references(() => contact.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_state_officers_block_contacts_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "page_blocks_state_officers_block_contacts_parent_id_idx",
    ).on(columns._parentID),
    page_blocks_state_officers_block_contacts_contact_idx: index(
      "page_blocks_state_officers_block_contacts_contact_idx",
    ).on(columns.contact),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_state_officers_block.id],
      name: "page_blocks_state_officers_block_contacts_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_state_officers_block = pgTable(
  "page_blocks_state_officers_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_state_officers_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_state_officers_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_state_officers_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_state_officers_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_state_chairmen_block_chairmen = pgTable(
  "page_blocks_state_chairmen_block_chairmen",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    chairman: integer("chairman_id")
      .notNull()
      .references(() => contact.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_state_chairmen_block_chairmen_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "page_blocks_state_chairmen_block_chairmen_parent_id_idx",
    ).on(columns._parentID),
    page_blocks_state_chairmen_block_chairmen_chairman_idx: index(
      "page_blocks_state_chairmen_block_chairmen_chairman_idx",
    ).on(columns.chairman),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_state_chairmen_block.id],
      name: "page_blocks_state_chairmen_block_chairmen_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_state_chairmen_block = pgTable(
  "page_blocks_state_chairmen_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_state_chairmen_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_state_chairmen_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_state_chairmen_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_state_chairmen_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_side_bar_layout_block_sections = pgTable(
  "page_blocks_side_bar_layout_block_sections",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    sectionTitle: varchar("section_title").notNull(),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_side_bar_layout_block_sections_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "page_blocks_side_bar_layout_block_sections_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_side_bar_layout_block.id],
      name: "page_blocks_side_bar_layout_block_sections_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_side_bar_layout_block = pgTable(
  "page_blocks_side_bar_layout_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_side_bar_layout_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_side_bar_layout_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_side_bar_layout_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_side_bar_layout_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_tabbed_layout_block_tabs = pgTable(
  "page_blocks_tabbed_layout_block_tabs",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    tabLabel: varchar("tab_label").notNull(),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_tabbed_layout_block_tabs_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "page_blocks_tabbed_layout_block_tabs_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_tabbed_layout_block.id],
      name: "page_blocks_tabbed_layout_block_tabs_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_tabbed_layout_block = pgTable(
  "page_blocks_tabbed_layout_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_tabbed_layout_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_tabbed_layout_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_tabbed_layout_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_tabbed_layout_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_court_table_block_courts = pgTable(
  "page_blocks_court_table_block_courts",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    court: integer("court_id")
      .notNull()
      .references(() => local_court.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_court_table_block_courts_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "page_blocks_court_table_block_courts_parent_id_idx",
    ).on(columns._parentID),
    page_blocks_court_table_block_courts_court_idx: index(
      "page_blocks_court_table_block_courts_court_idx",
    ).on(columns.court),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page_blocks_court_table_block.id],
      name: "page_blocks_court_table_block_courts_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_court_table_block = pgTable(
  "page_blocks_court_table_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    courtTableTitle: varchar("court_table_title"),
    courtTableDescription: varchar("court_table_description"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_court_table_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_court_table_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_court_table_block_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_court_table_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page_blocks_standard_layout_block = pgTable(
  "page_blocks_standard_layout_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("page_blocks_standard_layout_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("page_blocks_standard_layout_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("page_blocks_standard_layout_block_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [page.id],
      name: "page_blocks_standard_layout_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const page = pgTable(
  "page",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    hero_type: enum_page_hero_type("hero_type").notNull().default("lowImpact"),
    hero_richText: jsonb("hero_rich_text"),
    hero_media: integer("hero_media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    hero_includeButton: boolean("hero_include_button").default(true),
    hero_button_buttonText: varchar("hero_button_button_text"),
    hero_button_buttonLink: integer("hero_button_button_link_id").references(
      (): AnyPgColumn => page.id,
      {
        onDelete: "set null",
      },
    ),
    slug: varchar("slug").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    page_hero_hero_media_idx: index("page_hero_hero_media_idx").on(
      columns.hero_media,
    ),
    page_hero_button_hero_button_button_link_idx: index(
      "page_hero_button_hero_button_button_link_idx",
    ).on(columns.hero_button_buttonLink),
    page_updated_at_idx: index("page_updated_at_idx").on(columns.updatedAt),
    page_created_at_idx: index("page_created_at_idx").on(columns.createdAt),
  }),
);

export const contact_contact_roles = pgTable(
  "contact_contact_roles",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    role: varchar("role"),
  },
  (columns) => ({
    _orderIdx: index("contact_contact_roles_order_idx").on(columns._order),
    _parentIDIdx: index("contact_contact_roles_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [contact.id],
      name: "contact_contact_roles_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const contact = pgTable(
  "contact",
  {
    id: serial("id").primaryKey(),
    contactName: varchar("contact_name").notNull(),
    contactEmail: varchar("contact_email"),
    contactImage: integer("contact_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    contactPositions_officer: boolean("contact_positions_officer"),
    contactPositions_chairman: boolean("contact_positions_chairman"),
    contactPositions_districtDeputy: boolean(
      "contact_positions_district_deputy",
    ),
    contactType: enum_contact_contact_type("contact_type")
      .notNull()
      .default("national"),
    contactLink: integer("contact_link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    contact_contact_image_idx: index("contact_contact_image_idx").on(
      columns.contactImage,
    ),
    contact_contact_link_idx: index("contact_contact_link_idx").on(
      columns.contactLink,
    ),
    contact_updated_at_idx: index("contact_updated_at_idx").on(
      columns.updatedAt,
    ),
    contact_created_at_idx: index("contact_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const diocese_district_deputies = pgTable(
  "diocese_district_deputies",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    deputy: integer("deputy_id")
      .notNull()
      .references(() => contact.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("diocese_district_deputies_order_idx").on(columns._order),
    _parentIDIdx: index("diocese_district_deputies_parent_id_idx").on(
      columns._parentID,
    ),
    diocese_district_deputies_deputy_idx: index(
      "diocese_district_deputies_deputy_idx",
    ).on(columns.deputy),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [diocese.id],
      name: "diocese_district_deputies_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const diocese_diocese_meeting_schedule = pgTable(
  "diocese_diocese_meeting_schedule",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    meetingDate: timestamp("meeting_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    meetingLocation_meetingAddress: varchar("meeting_location_meeting_address"),
    meetingLocation_meetingCity: varchar("meeting_location_meeting_city"),
    meetingLocation_meetingState: varchar("meeting_location_meeting_state"),
    meetingLocation_meetingZipcode: varchar("meeting_location_meeting_zipcode"),
  },
  (columns) => ({
    _orderIdx: index("diocese_diocese_meeting_schedule_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("diocese_diocese_meeting_schedule_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [diocese.id],
      name: "diocese_diocese_meeting_schedule_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const diocese_diocese_events = pgTable(
  "diocese_diocese_events",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    event: integer("event_id")
      .notNull()
      .references(() => event.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("diocese_diocese_events_order_idx").on(columns._order),
    _parentIDIdx: index("diocese_diocese_events_parent_id_idx").on(
      columns._parentID,
    ),
    diocese_diocese_events_event_idx: index(
      "diocese_diocese_events_event_idx",
    ).on(columns.event),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [diocese.id],
      name: "diocese_diocese_events_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const diocese = pgTable(
  "diocese",
  {
    id: serial("id").primaryKey(),
    dioceseName: varchar("diocese_name").notNull(),
    dioceseWebsite: varchar("diocese_website"),
    dioceseLocation_dioceseAddress: varchar("diocese_location_diocese_address"),
    dioceseLocation_dioceseCity: varchar("diocese_location_diocese_city"),
    dioceseLocation_dioceseState: varchar("diocese_location_diocese_state"),
    dioceseLocation_dioceseZipcode: varchar("diocese_location_diocese_zipcode"),
    diocesePhoneNumber: varchar("diocese_phone_number"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    diocese_updated_at_idx: index("diocese_updated_at_idx").on(
      columns.updatedAt,
    ),
    diocese_created_at_idx: index("diocese_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const event = pgTable(
  "event",
  {
    id: serial("id").primaryKey(),
    eventName: varchar("event_name").notNull(),
    eventDate: timestamp("event_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    eventDescription: varchar("event_description").notNull(),
    eventType: enum_event_event_type("event_type").notNull(),
    link: integer("link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    linkText: varchar("link_text"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    event_link_idx: index("event_link_idx").on(columns.link),
    event_updated_at_idx: index("event_updated_at_idx").on(columns.updatedAt),
    event_created_at_idx: index("event_created_at_idx").on(columns.createdAt),
  }),
);

export const project = pgTable(
  "project",
  {
    id: serial("id").primaryKey(),
    projectName: varchar("project_name").notNull(),
    projectDescription: varchar("project_description").notNull(),
    projectType: enum_project_project_type("project_type").notNull(),
    projectLink: integer("project_link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    project_project_link_idx: index("project_project_link_idx").on(
      columns.projectLink,
    ),
    project_updated_at_idx: index("project_updated_at_idx").on(
      columns.updatedAt,
    ),
    project_created_at_idx: index("project_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const charity = pgTable(
  "charity",
  {
    id: serial("id").primaryKey(),
    charityName: varchar("charity_name").notNull(),
    charityDescription: varchar("charity_description").notNull(),
    charityType: enum_charity_charity_type("charity_type").notNull(),
    charityLink: integer("charity_link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    charity_charity_link_idx: index("charity_charity_link_idx").on(
      columns.charityLink,
    ),
    charity_updated_at_idx: index("charity_updated_at_idx").on(
      columns.updatedAt,
    ),
    charity_created_at_idx: index("charity_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const fundraiser = pgTable(
  "fundraiser",
  {
    id: serial("id").primaryKey(),
    fundraiserName: varchar("fundraiser_name").notNull(),
    fundraiserDescription: varchar("fundraiser_description").notNull(),
    fundraiserType:
      enum_fundraiser_fundraiser_type("fundraiser_type").notNull(),
    fundraiserLink: integer("fundraiser_link_id").references(() => page.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    fundraiser_fundraiser_link_idx: index("fundraiser_fundraiser_link_idx").on(
      columns.fundraiserLink,
    ),
    fundraiser_updated_at_idx: index("fundraiser_updated_at_idx").on(
      columns.updatedAt,
    ),
    fundraiser_created_at_idx: index("fundraiser_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const local_court_court_meeting_schedule = pgTable(
  "local_court_court_meeting_schedule",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    courtMeetingDate: timestamp("court_meeting_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    courtMeetingLocation_courtMeetingAddress: varchar(
      "court_meeting_location_court_meeting_address",
    ),
    courtMeetingLocation_courtMeetingCity: varchar(
      "court_meeting_location_court_meeting_city",
    ),
    courtMeetingLocation_courtMeetingState: varchar(
      "court_meeting_location_court_meeting_state",
    ),
    courtMeetingLocation_courtMeetingZipcode: varchar(
      "court_meeting_location_court_meeting_zipcode",
    ),
  },
  (columns) => ({
    _orderIdx: index("local_court_court_meeting_schedule_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("local_court_court_meeting_schedule_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [local_court.id],
      name: "local_court_court_meeting_schedule_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const local_court_court_events = pgTable(
  "local_court_court_events",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    event: integer("event_id")
      .notNull()
      .references(() => event.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("local_court_court_events_order_idx").on(columns._order),
    _parentIDIdx: index("local_court_court_events_parent_id_idx").on(
      columns._parentID,
    ),
    local_court_court_events_event_idx: index(
      "local_court_court_events_event_idx",
    ).on(columns.event),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [local_court.id],
      name: "local_court_court_events_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const local_court_court_projects = pgTable(
  "local_court_court_projects",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    project: integer("project_id")
      .notNull()
      .references(() => project.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("local_court_court_projects_order_idx").on(columns._order),
    _parentIDIdx: index("local_court_court_projects_parent_id_idx").on(
      columns._parentID,
    ),
    local_court_court_projects_project_idx: index(
      "local_court_court_projects_project_idx",
    ).on(columns.project),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [local_court.id],
      name: "local_court_court_projects_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const local_court_court_charities = pgTable(
  "local_court_court_charities",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    charity: integer("charity_id")
      .notNull()
      .references(() => charity.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("local_court_court_charities_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("local_court_court_charities_parent_id_idx").on(
      columns._parentID,
    ),
    local_court_court_charities_charity_idx: index(
      "local_court_court_charities_charity_idx",
    ).on(columns.charity),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [local_court.id],
      name: "local_court_court_charities_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const local_court_court_fundraisers = pgTable(
  "local_court_court_fundraisers",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    fundraiser: integer("fundraiser_id")
      .notNull()
      .references(() => fundraiser.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("local_court_court_fundraisers_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("local_court_court_fundraisers_parent_id_idx").on(
      columns._parentID,
    ),
    local_court_court_fundraisers_fundraiser_idx: index(
      "local_court_court_fundraisers_fundraiser_idx",
    ).on(columns.fundraiser),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [local_court.id],
      name: "local_court_court_fundraisers_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const local_court_court_newsletters = pgTable(
  "local_court_court_newsletters",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    newsletter: integer("newsletter_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("local_court_court_newsletters_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("local_court_court_newsletters_parent_id_idx").on(
      columns._parentID,
    ),
    local_court_court_newsletters_newsletter_idx: index(
      "local_court_court_newsletters_newsletter_idx",
    ).on(columns.newsletter),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [local_court.id],
      name: "local_court_court_newsletters_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const local_court = pgTable(
  "local_court",
  {
    id: serial("id").primaryKey(),
    courtName: varchar("court_name").notNull(),
    courtDiocese: integer("court_diocese_id")
      .notNull()
      .references(() => diocese.id, {
        onDelete: "set null",
      }),
    courtNumber: numeric("court_number").notNull(),
    instituted: timestamp("instituted", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    courtWebsite: varchar("court_website"),
    courtLocation_courtAddress: varchar("court_location_court_address"),
    courtLocation_courtCity: varchar("court_location_court_city"),
    courtLocation_courtState: varchar("court_location_court_state"),
    courtLocation_courtZipcode: varchar("court_location_court_zipcode"),
    courtPhoneNumber: varchar("court_phone_number"),
    courtOfficers_courtRegent: integer(
      "court_officers_court_regent_id",
    ).references(() => contact.id, {
      onDelete: "set null",
    }),
    courtOfficers_courtViceRegent: integer(
      "court_officers_court_vice_regent_id",
    ).references(() => contact.id, {
      onDelete: "set null",
    }),
    courtOfficers_courtRecordingSecretary: integer(
      "court_officers_court_recording_secretary_id",
    ).references(() => contact.id, {
      onDelete: "set null",
    }),
    courtOfficers_courtFinancialSecretary: integer(
      "court_officers_court_financial_secretary_id",
    ).references(() => contact.id, {
      onDelete: "set null",
    }),
    courtOfficers_courtTreasurer: integer(
      "court_officers_court_treasurer_id",
    ).references(() => contact.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    local_court_court_diocese_idx: index("local_court_court_diocese_idx").on(
      columns.courtDiocese,
    ),
    local_court_court_officers_court_officers_court_regent_idx: index(
      "local_court_court_officers_court_officers_court_regent_idx",
    ).on(columns.courtOfficers_courtRegent),
    local_court_court_officers_court_officers_court_vice_regent_idx: index(
      "local_court_court_officers_court_officers_court_vice_regent_idx",
    ).on(columns.courtOfficers_courtViceRegent),
    local_court_court_officers_court_officers_court_recording_secretary_idx:
      index(
        "local_court_court_officers_court_officers_court_recording_secretary_idx",
      ).on(columns.courtOfficers_courtRecordingSecretary),
    local_court_court_officers_court_officers_court_financial_secretary_idx:
      index(
        "local_court_court_officers_court_officers_court_financial_secretary_idx",
      ).on(columns.courtOfficers_courtFinancialSecretary),
    local_court_court_officers_court_officers_court_treasurer_idx: index(
      "local_court_court_officers_court_officers_court_treasurer_idx",
    ).on(columns.courtOfficers_courtTreasurer),
    local_court_updated_at_idx: index("local_court_updated_at_idx").on(
      columns.updatedAt,
    ),
    local_court_created_at_idx: index("local_court_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    newsPostID: integer("news_post_id"),
    usersID: integer("users_id"),
    pageID: integer("page_id"),
    contactID: integer("contact_id"),
    dioceseID: integer("diocese_id"),
    eventID: integer("event_id"),
    projectID: integer("project_id"),
    charityID: integer("charity_id"),
    fundraiserID: integer("fundraiser_id"),
    localCourtID: integer("local_court_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_news_post_id_idx: index(
      "payload_locked_documents_rels_news_post_id_idx",
    ).on(columns.newsPostID),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_page_id_idx: index(
      "payload_locked_documents_rels_page_id_idx",
    ).on(columns.pageID),
    payload_locked_documents_rels_contact_id_idx: index(
      "payload_locked_documents_rels_contact_id_idx",
    ).on(columns.contactID),
    payload_locked_documents_rels_diocese_id_idx: index(
      "payload_locked_documents_rels_diocese_id_idx",
    ).on(columns.dioceseID),
    payload_locked_documents_rels_event_id_idx: index(
      "payload_locked_documents_rels_event_id_idx",
    ).on(columns.eventID),
    payload_locked_documents_rels_project_id_idx: index(
      "payload_locked_documents_rels_project_id_idx",
    ).on(columns.projectID),
    payload_locked_documents_rels_charity_id_idx: index(
      "payload_locked_documents_rels_charity_id_idx",
    ).on(columns.charityID),
    payload_locked_documents_rels_fundraiser_id_idx: index(
      "payload_locked_documents_rels_fundraiser_id_idx",
    ).on(columns.fundraiserID),
    payload_locked_documents_rels_local_court_id_idx: index(
      "payload_locked_documents_rels_local_court_id_idx",
    ).on(columns.localCourtID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    newsPostIdFk: foreignKey({
      columns: [columns["newsPostID"]],
      foreignColumns: [news_post.id],
      name: "payload_locked_documents_rels_news_post_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    pageIdFk: foreignKey({
      columns: [columns["pageID"]],
      foreignColumns: [page.id],
      name: "payload_locked_documents_rels_page_fk",
    }).onDelete("cascade"),
    contactIdFk: foreignKey({
      columns: [columns["contactID"]],
      foreignColumns: [contact.id],
      name: "payload_locked_documents_rels_contact_fk",
    }).onDelete("cascade"),
    dioceseIdFk: foreignKey({
      columns: [columns["dioceseID"]],
      foreignColumns: [diocese.id],
      name: "payload_locked_documents_rels_diocese_fk",
    }).onDelete("cascade"),
    eventIdFk: foreignKey({
      columns: [columns["eventID"]],
      foreignColumns: [event.id],
      name: "payload_locked_documents_rels_event_fk",
    }).onDelete("cascade"),
    projectIdFk: foreignKey({
      columns: [columns["projectID"]],
      foreignColumns: [project.id],
      name: "payload_locked_documents_rels_project_fk",
    }).onDelete("cascade"),
    charityIdFk: foreignKey({
      columns: [columns["charityID"]],
      foreignColumns: [charity.id],
      name: "payload_locked_documents_rels_charity_fk",
    }).onDelete("cascade"),
    fundraiserIdFk: foreignKey({
      columns: [columns["fundraiserID"]],
      foreignColumns: [fundraiser.id],
      name: "payload_locked_documents_rels_fundraiser_fk",
    }).onDelete("cascade"),
    localCourtIdFk: foreignKey({
      columns: [columns["localCourtID"]],
      foreignColumns: [local_court.id],
      name: "payload_locked_documents_rels_local_court_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const contact_form = pgTable("contact_form", {
  id: serial("id").primaryKey(),
  emailHeading: varchar("email_heading").notNull().default("Email"),
  contactName: varchar("contact_name").notNull(),
  contactEmail: varchar("contact_email").notNull(),
  text: jsonb("text"),
  nameLabel: varchar("name_label").notNull(),
  namePlaceholder: varchar("name_placeholder").notNull(),
  emailLabel: varchar("email_label").notNull(),
  emailPlaceholder: varchar("email_placeholder").notNull(),
  phoneLabel: varchar("phone_label").notNull(),
  phonePlaceholder: varchar("phone_placeholder").notNull(),
  messageLabel: varchar("message_label").notNull(),
  messagePlaceholder: varchar("message_placeholder").notNull(),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const footer_social_media_icons = pgTable(
  "footer_social_media_icons",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    icon: integer("icon_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    link: varchar("link").notNull(),
  },
  (columns) => ({
    _orderIdx: index("footer_social_media_icons_order_idx").on(columns._order),
    _parentIDIdx: index("footer_social_media_icons_parent_id_idx").on(
      columns._parentID,
    ),
    footer_social_media_icons_icon_idx: index(
      "footer_social_media_icons_icon_idx",
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer.id],
      name: "footer_social_media_icons_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer_links = pgTable(
  "footer_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link: integer("link_id")
      .notNull()
      .references(() => page.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("footer_links_order_idx").on(columns._order),
    _parentIDIdx: index("footer_links_parent_id_idx").on(columns._parentID),
    footer_links_link_idx: index("footer_links_link_idx").on(columns.link),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer.id],
      name: "footer_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer = pgTable(
  "footer",
  {
    id: serial("id").primaryKey(),
    logo: integer("logo_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    title: varchar("title").notNull(),
    text: varchar("text"),
    linksHeading: varchar("links_heading").notNull(),
    copyrightText: varchar("copyright_text").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    footer_logo_idx: index("footer_logo_idx").on(columns.logo),
  }),
);

export const header_nav_items_sub_nav_sub_nav_items = pgTable(
  "header_nav_items_sub_nav_sub_nav_items",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    page: integer("page_id")
      .notNull()
      .references(() => page.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("header_nav_items_sub_nav_sub_nav_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "header_nav_items_sub_nav_sub_nav_items_parent_id_idx",
    ).on(columns._parentID),
    header_nav_items_sub_nav_sub_nav_items_page_idx: index(
      "header_nav_items_sub_nav_sub_nav_items_page_idx",
    ).on(columns.page),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header_nav_items_sub_nav.id],
      name: "header_nav_items_sub_nav_sub_nav_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header_nav_items_sub_nav = pgTable(
  "header_nav_items_sub_nav",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
  },
  (columns) => ({
    _orderIdx: index("header_nav_items_sub_nav_order_idx").on(columns._order),
    _parentIDIdx: index("header_nav_items_sub_nav_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header_nav_items.id],
      name: "header_nav_items_sub_nav_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header_nav_items = pgTable(
  "header_nav_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    description: varchar("description"),
    page: integer("page_id")
      .notNull()
      .references(() => page.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("header_nav_items_order_idx").on(columns._order),
    _parentIDIdx: index("header_nav_items_parent_id_idx").on(columns._parentID),
    header_nav_items_page_idx: index("header_nav_items_page_idx").on(
      columns.page,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header.id],
      name: "header_nav_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header = pgTable(
  "header",
  {
    id: serial("id").primaryKey(),
    logo: integer("logo_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    menuIcon: integer("menu_icon_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    closeIcon: integer("close_icon_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    subMenuIcon: integer("sub_menu_icon_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    backIcon: integer("back_icon_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    header_logo_idx: index("header_logo_idx").on(columns.logo),
    header_menu_icon_idx: index("header_menu_icon_idx").on(columns.menuIcon),
    header_close_icon_idx: index("header_close_icon_idx").on(columns.closeIcon),
    header_sub_menu_icon_idx: index("header_sub_menu_icon_idx").on(
      columns.subMenuIcon,
    ),
    header_back_icon_idx: index("header_back_icon_idx").on(columns.backIcon),
  }),
);

export const relations_media = relations(media, () => ({}));
export const relations_news_post = relations(news_post, ({ one }) => ({
  link: one(page, {
    fields: [news_post.link],
    references: [page.id],
    relationName: "link",
  }),
}));
export const relations_users = relations(users, () => ({}));
export const relations_page_blocks_content_columns = relations(
  page_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(page_blocks_content, {
      fields: [page_blocks_content_columns._parentID],
      references: [page_blocks_content.id],
      relationName: "columns",
    }),
  }),
);
export const relations_page_blocks_content = relations(
  page_blocks_content,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_content._parentID],
      references: [page.id],
      relationName: "_blocks_content",
    }),
    columns: many(page_blocks_content_columns, {
      relationName: "columns",
    }),
  }),
);
export const relations_page_blocks_stats_bar_stats = relations(
  page_blocks_stats_bar_stats,
  ({ one }) => ({
    _parentID: one(page_blocks_stats_bar, {
      fields: [page_blocks_stats_bar_stats._parentID],
      references: [page_blocks_stats_bar.id],
      relationName: "stats",
    }),
  }),
);
export const relations_page_blocks_stats_bar = relations(
  page_blocks_stats_bar,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_stats_bar._parentID],
      references: [page.id],
      relationName: "_blocks_statsBar",
    }),
    stats: many(page_blocks_stats_bar_stats, {
      relationName: "stats",
    }),
  }),
);
export const relations_page_blocks_side_bar_sections = relations(
  page_blocks_side_bar_sections,
  ({ one }) => ({
    _parentID: one(page_blocks_side_bar, {
      fields: [page_blocks_side_bar_sections._parentID],
      references: [page_blocks_side_bar.id],
      relationName: "sections",
    }),
  }),
);
export const relations_page_blocks_side_bar = relations(
  page_blocks_side_bar,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_side_bar._parentID],
      references: [page.id],
      relationName: "_blocks_sideBar",
    }),
    sections: many(page_blocks_side_bar_sections, {
      relationName: "sections",
    }),
  }),
);
export const relations_page_blocks_page_heading_block = relations(
  page_blocks_page_heading_block,
  ({ one }) => ({
    _parentID: one(page, {
      fields: [page_blocks_page_heading_block._parentID],
      references: [page.id],
      relationName: "_blocks_pageHeadingBlock",
    }),
  }),
);
export const relations_page_blocks_hero_banner_block = relations(
  page_blocks_hero_banner_block,
  ({ one }) => ({
    _parentID: one(page, {
      fields: [page_blocks_hero_banner_block._parentID],
      references: [page.id],
      relationName: "_blocks_heroBannerBlock",
    }),
    heroImage: one(media, {
      fields: [page_blocks_hero_banner_block.heroImage],
      references: [media.id],
      relationName: "heroImage",
    }),
    link: one(page, {
      fields: [page_blocks_hero_banner_block.link],
      references: [page.id],
      relationName: "link",
    }),
  }),
);
export const relations_page_blocks_news_postings_block_posts = relations(
  page_blocks_news_postings_block_posts,
  ({ one }) => ({
    _parentID: one(page_blocks_news_postings_block, {
      fields: [page_blocks_news_postings_block_posts._parentID],
      references: [page_blocks_news_postings_block.id],
      relationName: "posts",
    }),
    post: one(news_post, {
      fields: [page_blocks_news_postings_block_posts.post],
      references: [news_post.id],
      relationName: "post",
    }),
  }),
);
export const relations_page_blocks_news_postings_block = relations(
  page_blocks_news_postings_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_news_postings_block._parentID],
      references: [page.id],
      relationName: "_blocks_newsPostingsBlock",
    }),
    posts: many(page_blocks_news_postings_block_posts, {
      relationName: "posts",
    }),
  }),
);
export const relations_page_blocks_rich_text_block = relations(
  page_blocks_rich_text_block,
  ({ one }) => ({
    _parentID: one(page, {
      fields: [page_blocks_rich_text_block._parentID],
      references: [page.id],
      relationName: "_blocks_richTextBlock",
    }),
  }),
);
export const relations_page_blocks_stats_block_stats = relations(
  page_blocks_stats_block_stats,
  ({ one }) => ({
    _parentID: one(page_blocks_stats_block, {
      fields: [page_blocks_stats_block_stats._parentID],
      references: [page_blocks_stats_block.id],
      relationName: "stats",
    }),
  }),
);
export const relations_page_blocks_stats_block = relations(
  page_blocks_stats_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_stats_block._parentID],
      references: [page.id],
      relationName: "_blocks_statsBlock",
    }),
    stats: many(page_blocks_stats_block_stats, {
      relationName: "stats",
    }),
  }),
);
export const relations_page_blocks_district_deputies_block = relations(
  page_blocks_district_deputies_block,
  ({ one }) => ({
    _parentID: one(page, {
      fields: [page_blocks_district_deputies_block._parentID],
      references: [page.id],
      relationName: "_blocks_districtDeputiesBlock",
    }),
    diocese: one(diocese, {
      fields: [page_blocks_district_deputies_block.diocese],
      references: [diocese.id],
      relationName: "diocese",
    }),
  }),
);
export const relations_page_blocks_state_officers_block_contacts = relations(
  page_blocks_state_officers_block_contacts,
  ({ one }) => ({
    _parentID: one(page_blocks_state_officers_block, {
      fields: [page_blocks_state_officers_block_contacts._parentID],
      references: [page_blocks_state_officers_block.id],
      relationName: "contacts",
    }),
    contact: one(contact, {
      fields: [page_blocks_state_officers_block_contacts.contact],
      references: [contact.id],
      relationName: "contact",
    }),
  }),
);
export const relations_page_blocks_state_officers_block = relations(
  page_blocks_state_officers_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_state_officers_block._parentID],
      references: [page.id],
      relationName: "_blocks_stateOfficersBlock",
    }),
    contacts: many(page_blocks_state_officers_block_contacts, {
      relationName: "contacts",
    }),
  }),
);
export const relations_page_blocks_state_chairmen_block_chairmen = relations(
  page_blocks_state_chairmen_block_chairmen,
  ({ one }) => ({
    _parentID: one(page_blocks_state_chairmen_block, {
      fields: [page_blocks_state_chairmen_block_chairmen._parentID],
      references: [page_blocks_state_chairmen_block.id],
      relationName: "chairmen",
    }),
    chairman: one(contact, {
      fields: [page_blocks_state_chairmen_block_chairmen.chairman],
      references: [contact.id],
      relationName: "chairman",
    }),
  }),
);
export const relations_page_blocks_state_chairmen_block = relations(
  page_blocks_state_chairmen_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_state_chairmen_block._parentID],
      references: [page.id],
      relationName: "_blocks_stateChairmenBlock",
    }),
    chairmen: many(page_blocks_state_chairmen_block_chairmen, {
      relationName: "chairmen",
    }),
  }),
);
export const relations_page_blocks_side_bar_layout_block_sections = relations(
  page_blocks_side_bar_layout_block_sections,
  ({ one }) => ({
    _parentID: one(page_blocks_side_bar_layout_block, {
      fields: [page_blocks_side_bar_layout_block_sections._parentID],
      references: [page_blocks_side_bar_layout_block.id],
      relationName: "sections",
    }),
  }),
);
export const relations_page_blocks_side_bar_layout_block = relations(
  page_blocks_side_bar_layout_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_side_bar_layout_block._parentID],
      references: [page.id],
      relationName: "_blocks_sideBarLayoutBlock",
    }),
    sections: many(page_blocks_side_bar_layout_block_sections, {
      relationName: "sections",
    }),
  }),
);
export const relations_page_blocks_tabbed_layout_block_tabs = relations(
  page_blocks_tabbed_layout_block_tabs,
  ({ one }) => ({
    _parentID: one(page_blocks_tabbed_layout_block, {
      fields: [page_blocks_tabbed_layout_block_tabs._parentID],
      references: [page_blocks_tabbed_layout_block.id],
      relationName: "tabs",
    }),
  }),
);
export const relations_page_blocks_tabbed_layout_block = relations(
  page_blocks_tabbed_layout_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_tabbed_layout_block._parentID],
      references: [page.id],
      relationName: "_blocks_tabbedLayoutBlock",
    }),
    tabs: many(page_blocks_tabbed_layout_block_tabs, {
      relationName: "tabs",
    }),
  }),
);
export const relations_page_blocks_court_table_block_courts = relations(
  page_blocks_court_table_block_courts,
  ({ one }) => ({
    _parentID: one(page_blocks_court_table_block, {
      fields: [page_blocks_court_table_block_courts._parentID],
      references: [page_blocks_court_table_block.id],
      relationName: "courts",
    }),
    court: one(local_court, {
      fields: [page_blocks_court_table_block_courts.court],
      references: [local_court.id],
      relationName: "court",
    }),
  }),
);
export const relations_page_blocks_court_table_block = relations(
  page_blocks_court_table_block,
  ({ one, many }) => ({
    _parentID: one(page, {
      fields: [page_blocks_court_table_block._parentID],
      references: [page.id],
      relationName: "_blocks_courtTableBlock",
    }),
    courts: many(page_blocks_court_table_block_courts, {
      relationName: "courts",
    }),
  }),
);
export const relations_page_blocks_standard_layout_block = relations(
  page_blocks_standard_layout_block,
  ({ one }) => ({
    _parentID: one(page, {
      fields: [page_blocks_standard_layout_block._parentID],
      references: [page.id],
      relationName: "_blocks_standardLayoutBlock",
    }),
  }),
);
export const relations_page = relations(page, ({ one, many }) => ({
  hero_media: one(media, {
    fields: [page.hero_media],
    references: [media.id],
    relationName: "hero_media",
  }),
  hero_button_buttonLink: one(page, {
    fields: [page.hero_button_buttonLink],
    references: [page.id],
    relationName: "hero_button_buttonLink",
  }),
  _blocks_content: many(page_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_statsBar: many(page_blocks_stats_bar, {
    relationName: "_blocks_statsBar",
  }),
  _blocks_sideBar: many(page_blocks_side_bar, {
    relationName: "_blocks_sideBar",
  }),
  _blocks_pageHeadingBlock: many(page_blocks_page_heading_block, {
    relationName: "_blocks_pageHeadingBlock",
  }),
  _blocks_heroBannerBlock: many(page_blocks_hero_banner_block, {
    relationName: "_blocks_heroBannerBlock",
  }),
  _blocks_newsPostingsBlock: many(page_blocks_news_postings_block, {
    relationName: "_blocks_newsPostingsBlock",
  }),
  _blocks_richTextBlock: many(page_blocks_rich_text_block, {
    relationName: "_blocks_richTextBlock",
  }),
  _blocks_statsBlock: many(page_blocks_stats_block, {
    relationName: "_blocks_statsBlock",
  }),
  _blocks_districtDeputiesBlock: many(page_blocks_district_deputies_block, {
    relationName: "_blocks_districtDeputiesBlock",
  }),
  _blocks_stateOfficersBlock: many(page_blocks_state_officers_block, {
    relationName: "_blocks_stateOfficersBlock",
  }),
  _blocks_stateChairmenBlock: many(page_blocks_state_chairmen_block, {
    relationName: "_blocks_stateChairmenBlock",
  }),
  _blocks_sideBarLayoutBlock: many(page_blocks_side_bar_layout_block, {
    relationName: "_blocks_sideBarLayoutBlock",
  }),
  _blocks_tabbedLayoutBlock: many(page_blocks_tabbed_layout_block, {
    relationName: "_blocks_tabbedLayoutBlock",
  }),
  _blocks_courtTableBlock: many(page_blocks_court_table_block, {
    relationName: "_blocks_courtTableBlock",
  }),
  _blocks_standardLayoutBlock: many(page_blocks_standard_layout_block, {
    relationName: "_blocks_standardLayoutBlock",
  }),
}));
export const relations_contact_contact_roles = relations(
  contact_contact_roles,
  ({ one }) => ({
    _parentID: one(contact, {
      fields: [contact_contact_roles._parentID],
      references: [contact.id],
      relationName: "contactRoles",
    }),
  }),
);
export const relations_contact = relations(contact, ({ one, many }) => ({
  contactImage: one(media, {
    fields: [contact.contactImage],
    references: [media.id],
    relationName: "contactImage",
  }),
  contactRoles: many(contact_contact_roles, {
    relationName: "contactRoles",
  }),
  contactLink: one(page, {
    fields: [contact.contactLink],
    references: [page.id],
    relationName: "contactLink",
  }),
}));
export const relations_diocese_district_deputies = relations(
  diocese_district_deputies,
  ({ one }) => ({
    _parentID: one(diocese, {
      fields: [diocese_district_deputies._parentID],
      references: [diocese.id],
      relationName: "districtDeputies",
    }),
    deputy: one(contact, {
      fields: [diocese_district_deputies.deputy],
      references: [contact.id],
      relationName: "deputy",
    }),
  }),
);
export const relations_diocese_diocese_meeting_schedule = relations(
  diocese_diocese_meeting_schedule,
  ({ one }) => ({
    _parentID: one(diocese, {
      fields: [diocese_diocese_meeting_schedule._parentID],
      references: [diocese.id],
      relationName: "dioceseMeetingSchedule",
    }),
  }),
);
export const relations_diocese_diocese_events = relations(
  diocese_diocese_events,
  ({ one }) => ({
    _parentID: one(diocese, {
      fields: [diocese_diocese_events._parentID],
      references: [diocese.id],
      relationName: "dioceseEvents",
    }),
    event: one(event, {
      fields: [diocese_diocese_events.event],
      references: [event.id],
      relationName: "event",
    }),
  }),
);
export const relations_diocese = relations(diocese, ({ many }) => ({
  districtDeputies: many(diocese_district_deputies, {
    relationName: "districtDeputies",
  }),
  dioceseMeetingSchedule: many(diocese_diocese_meeting_schedule, {
    relationName: "dioceseMeetingSchedule",
  }),
  dioceseEvents: many(diocese_diocese_events, {
    relationName: "dioceseEvents",
  }),
}));
export const relations_event = relations(event, ({ one }) => ({
  link: one(page, {
    fields: [event.link],
    references: [page.id],
    relationName: "link",
  }),
}));
export const relations_project = relations(project, ({ one }) => ({
  projectLink: one(page, {
    fields: [project.projectLink],
    references: [page.id],
    relationName: "projectLink",
  }),
}));
export const relations_charity = relations(charity, ({ one }) => ({
  charityLink: one(page, {
    fields: [charity.charityLink],
    references: [page.id],
    relationName: "charityLink",
  }),
}));
export const relations_fundraiser = relations(fundraiser, ({ one }) => ({
  fundraiserLink: one(page, {
    fields: [fundraiser.fundraiserLink],
    references: [page.id],
    relationName: "fundraiserLink",
  }),
}));
export const relations_local_court_court_meeting_schedule = relations(
  local_court_court_meeting_schedule,
  ({ one }) => ({
    _parentID: one(local_court, {
      fields: [local_court_court_meeting_schedule._parentID],
      references: [local_court.id],
      relationName: "courtMeetingSchedule",
    }),
  }),
);
export const relations_local_court_court_events = relations(
  local_court_court_events,
  ({ one }) => ({
    _parentID: one(local_court, {
      fields: [local_court_court_events._parentID],
      references: [local_court.id],
      relationName: "courtEvents",
    }),
    event: one(event, {
      fields: [local_court_court_events.event],
      references: [event.id],
      relationName: "event",
    }),
  }),
);
export const relations_local_court_court_projects = relations(
  local_court_court_projects,
  ({ one }) => ({
    _parentID: one(local_court, {
      fields: [local_court_court_projects._parentID],
      references: [local_court.id],
      relationName: "courtProjects",
    }),
    project: one(project, {
      fields: [local_court_court_projects.project],
      references: [project.id],
      relationName: "project",
    }),
  }),
);
export const relations_local_court_court_charities = relations(
  local_court_court_charities,
  ({ one }) => ({
    _parentID: one(local_court, {
      fields: [local_court_court_charities._parentID],
      references: [local_court.id],
      relationName: "courtCharities",
    }),
    charity: one(charity, {
      fields: [local_court_court_charities.charity],
      references: [charity.id],
      relationName: "charity",
    }),
  }),
);
export const relations_local_court_court_fundraisers = relations(
  local_court_court_fundraisers,
  ({ one }) => ({
    _parentID: one(local_court, {
      fields: [local_court_court_fundraisers._parentID],
      references: [local_court.id],
      relationName: "courtFundraisers",
    }),
    fundraiser: one(fundraiser, {
      fields: [local_court_court_fundraisers.fundraiser],
      references: [fundraiser.id],
      relationName: "fundraiser",
    }),
  }),
);
export const relations_local_court_court_newsletters = relations(
  local_court_court_newsletters,
  ({ one }) => ({
    _parentID: one(local_court, {
      fields: [local_court_court_newsletters._parentID],
      references: [local_court.id],
      relationName: "courtNewsletters",
    }),
    newsletter: one(media, {
      fields: [local_court_court_newsletters.newsletter],
      references: [media.id],
      relationName: "newsletter",
    }),
  }),
);
export const relations_local_court = relations(
  local_court,
  ({ one, many }) => ({
    courtDiocese: one(diocese, {
      fields: [local_court.courtDiocese],
      references: [diocese.id],
      relationName: "courtDiocese",
    }),
    courtOfficers_courtRegent: one(contact, {
      fields: [local_court.courtOfficers_courtRegent],
      references: [contact.id],
      relationName: "courtOfficers_courtRegent",
    }),
    courtOfficers_courtViceRegent: one(contact, {
      fields: [local_court.courtOfficers_courtViceRegent],
      references: [contact.id],
      relationName: "courtOfficers_courtViceRegent",
    }),
    courtOfficers_courtRecordingSecretary: one(contact, {
      fields: [local_court.courtOfficers_courtRecordingSecretary],
      references: [contact.id],
      relationName: "courtOfficers_courtRecordingSecretary",
    }),
    courtOfficers_courtFinancialSecretary: one(contact, {
      fields: [local_court.courtOfficers_courtFinancialSecretary],
      references: [contact.id],
      relationName: "courtOfficers_courtFinancialSecretary",
    }),
    courtOfficers_courtTreasurer: one(contact, {
      fields: [local_court.courtOfficers_courtTreasurer],
      references: [contact.id],
      relationName: "courtOfficers_courtTreasurer",
    }),
    courtMeetingSchedule: many(local_court_court_meeting_schedule, {
      relationName: "courtMeetingSchedule",
    }),
    courtEvents: many(local_court_court_events, {
      relationName: "courtEvents",
    }),
    courtProjects: many(local_court_court_projects, {
      relationName: "courtProjects",
    }),
    courtCharities: many(local_court_court_charities, {
      relationName: "courtCharities",
    }),
    courtFundraisers: many(local_court_court_fundraisers, {
      relationName: "courtFundraisers",
    }),
    courtNewsletters: many(local_court_court_newsletters, {
      relationName: "courtNewsletters",
    }),
  }),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    newsPostID: one(news_post, {
      fields: [payload_locked_documents_rels.newsPostID],
      references: [news_post.id],
      relationName: "newsPost",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    pageID: one(page, {
      fields: [payload_locked_documents_rels.pageID],
      references: [page.id],
      relationName: "page",
    }),
    contactID: one(contact, {
      fields: [payload_locked_documents_rels.contactID],
      references: [contact.id],
      relationName: "contact",
    }),
    dioceseID: one(diocese, {
      fields: [payload_locked_documents_rels.dioceseID],
      references: [diocese.id],
      relationName: "diocese",
    }),
    eventID: one(event, {
      fields: [payload_locked_documents_rels.eventID],
      references: [event.id],
      relationName: "event",
    }),
    projectID: one(project, {
      fields: [payload_locked_documents_rels.projectID],
      references: [project.id],
      relationName: "project",
    }),
    charityID: one(charity, {
      fields: [payload_locked_documents_rels.charityID],
      references: [charity.id],
      relationName: "charity",
    }),
    fundraiserID: one(fundraiser, {
      fields: [payload_locked_documents_rels.fundraiserID],
      references: [fundraiser.id],
      relationName: "fundraiser",
    }),
    localCourtID: one(local_court, {
      fields: [payload_locked_documents_rels.localCourtID],
      references: [local_court.id],
      relationName: "localCourt",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_contact_form = relations(contact_form, () => ({}));
export const relations_footer_social_media_icons = relations(
  footer_social_media_icons,
  ({ one }) => ({
    _parentID: one(footer, {
      fields: [footer_social_media_icons._parentID],
      references: [footer.id],
      relationName: "socialMediaIcons",
    }),
    icon: one(media, {
      fields: [footer_social_media_icons.icon],
      references: [media.id],
      relationName: "icon",
    }),
  }),
);
export const relations_footer_links = relations(footer_links, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_links._parentID],
    references: [footer.id],
    relationName: "links",
  }),
  link: one(page, {
    fields: [footer_links.link],
    references: [page.id],
    relationName: "link",
  }),
}));
export const relations_footer = relations(footer, ({ one, many }) => ({
  logo: one(media, {
    fields: [footer.logo],
    references: [media.id],
    relationName: "logo",
  }),
  socialMediaIcons: many(footer_social_media_icons, {
    relationName: "socialMediaIcons",
  }),
  links: many(footer_links, {
    relationName: "links",
  }),
}));
export const relations_header_nav_items_sub_nav_sub_nav_items = relations(
  header_nav_items_sub_nav_sub_nav_items,
  ({ one }) => ({
    _parentID: one(header_nav_items_sub_nav, {
      fields: [header_nav_items_sub_nav_sub_nav_items._parentID],
      references: [header_nav_items_sub_nav.id],
      relationName: "subNavItems",
    }),
    page: one(page, {
      fields: [header_nav_items_sub_nav_sub_nav_items.page],
      references: [page.id],
      relationName: "page",
    }),
  }),
);
export const relations_header_nav_items_sub_nav = relations(
  header_nav_items_sub_nav,
  ({ one, many }) => ({
    _parentID: one(header_nav_items, {
      fields: [header_nav_items_sub_nav._parentID],
      references: [header_nav_items.id],
      relationName: "subNav",
    }),
    subNavItems: many(header_nav_items_sub_nav_sub_nav_items, {
      relationName: "subNavItems",
    }),
  }),
);
export const relations_header_nav_items = relations(
  header_nav_items,
  ({ one, many }) => ({
    _parentID: one(header, {
      fields: [header_nav_items._parentID],
      references: [header.id],
      relationName: "navItems",
    }),
    page: one(page, {
      fields: [header_nav_items.page],
      references: [page.id],
      relationName: "page",
    }),
    subNav: many(header_nav_items_sub_nav, {
      relationName: "subNav",
    }),
  }),
);
export const relations_header = relations(header, ({ one, many }) => ({
  navItems: many(header_nav_items, {
    relationName: "navItems",
  }),
  logo: one(media, {
    fields: [header.logo],
    references: [media.id],
    relationName: "logo",
  }),
  menuIcon: one(media, {
    fields: [header.menuIcon],
    references: [media.id],
    relationName: "menuIcon",
  }),
  closeIcon: one(media, {
    fields: [header.closeIcon],
    references: [media.id],
    relationName: "closeIcon",
  }),
  subMenuIcon: one(media, {
    fields: [header.subMenuIcon],
    references: [media.id],
    relationName: "subMenuIcon",
  }),
  backIcon: one(media, {
    fields: [header.backIcon],
    references: [media.id],
    relationName: "backIcon",
  }),
}));

type DatabaseSchema = {
  enum_page_blocks_content_columns_size: typeof enum_page_blocks_content_columns_size;
  enum_page_hero_type: typeof enum_page_hero_type;
  enum_contact_contact_type: typeof enum_contact_contact_type;
  enum_event_event_type: typeof enum_event_event_type;
  enum_project_project_type: typeof enum_project_project_type;
  enum_charity_charity_type: typeof enum_charity_charity_type;
  enum_fundraiser_fundraiser_type: typeof enum_fundraiser_fundraiser_type;
  media: typeof media;
  news_post: typeof news_post;
  users: typeof users;
  page_blocks_content_columns: typeof page_blocks_content_columns;
  page_blocks_content: typeof page_blocks_content;
  page_blocks_stats_bar_stats: typeof page_blocks_stats_bar_stats;
  page_blocks_stats_bar: typeof page_blocks_stats_bar;
  page_blocks_side_bar_sections: typeof page_blocks_side_bar_sections;
  page_blocks_side_bar: typeof page_blocks_side_bar;
  page_blocks_page_heading_block: typeof page_blocks_page_heading_block;
  page_blocks_hero_banner_block: typeof page_blocks_hero_banner_block;
  page_blocks_news_postings_block_posts: typeof page_blocks_news_postings_block_posts;
  page_blocks_news_postings_block: typeof page_blocks_news_postings_block;
  page_blocks_rich_text_block: typeof page_blocks_rich_text_block;
  page_blocks_stats_block_stats: typeof page_blocks_stats_block_stats;
  page_blocks_stats_block: typeof page_blocks_stats_block;
  page_blocks_district_deputies_block: typeof page_blocks_district_deputies_block;
  page_blocks_state_officers_block_contacts: typeof page_blocks_state_officers_block_contacts;
  page_blocks_state_officers_block: typeof page_blocks_state_officers_block;
  page_blocks_state_chairmen_block_chairmen: typeof page_blocks_state_chairmen_block_chairmen;
  page_blocks_state_chairmen_block: typeof page_blocks_state_chairmen_block;
  page_blocks_side_bar_layout_block_sections: typeof page_blocks_side_bar_layout_block_sections;
  page_blocks_side_bar_layout_block: typeof page_blocks_side_bar_layout_block;
  page_blocks_tabbed_layout_block_tabs: typeof page_blocks_tabbed_layout_block_tabs;
  page_blocks_tabbed_layout_block: typeof page_blocks_tabbed_layout_block;
  page_blocks_court_table_block_courts: typeof page_blocks_court_table_block_courts;
  page_blocks_court_table_block: typeof page_blocks_court_table_block;
  page_blocks_standard_layout_block: typeof page_blocks_standard_layout_block;
  page: typeof page;
  contact_contact_roles: typeof contact_contact_roles;
  contact: typeof contact;
  diocese_district_deputies: typeof diocese_district_deputies;
  diocese_diocese_meeting_schedule: typeof diocese_diocese_meeting_schedule;
  diocese_diocese_events: typeof diocese_diocese_events;
  diocese: typeof diocese;
  event: typeof event;
  project: typeof project;
  charity: typeof charity;
  fundraiser: typeof fundraiser;
  local_court_court_meeting_schedule: typeof local_court_court_meeting_schedule;
  local_court_court_events: typeof local_court_court_events;
  local_court_court_projects: typeof local_court_court_projects;
  local_court_court_charities: typeof local_court_court_charities;
  local_court_court_fundraisers: typeof local_court_court_fundraisers;
  local_court_court_newsletters: typeof local_court_court_newsletters;
  local_court: typeof local_court;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  contact_form: typeof contact_form;
  footer_social_media_icons: typeof footer_social_media_icons;
  footer_links: typeof footer_links;
  footer: typeof footer;
  header_nav_items_sub_nav_sub_nav_items: typeof header_nav_items_sub_nav_sub_nav_items;
  header_nav_items_sub_nav: typeof header_nav_items_sub_nav;
  header_nav_items: typeof header_nav_items;
  header: typeof header;
  relations_media: typeof relations_media;
  relations_news_post: typeof relations_news_post;
  relations_users: typeof relations_users;
  relations_page_blocks_content_columns: typeof relations_page_blocks_content_columns;
  relations_page_blocks_content: typeof relations_page_blocks_content;
  relations_page_blocks_stats_bar_stats: typeof relations_page_blocks_stats_bar_stats;
  relations_page_blocks_stats_bar: typeof relations_page_blocks_stats_bar;
  relations_page_blocks_side_bar_sections: typeof relations_page_blocks_side_bar_sections;
  relations_page_blocks_side_bar: typeof relations_page_blocks_side_bar;
  relations_page_blocks_page_heading_block: typeof relations_page_blocks_page_heading_block;
  relations_page_blocks_hero_banner_block: typeof relations_page_blocks_hero_banner_block;
  relations_page_blocks_news_postings_block_posts: typeof relations_page_blocks_news_postings_block_posts;
  relations_page_blocks_news_postings_block: typeof relations_page_blocks_news_postings_block;
  relations_page_blocks_rich_text_block: typeof relations_page_blocks_rich_text_block;
  relations_page_blocks_stats_block_stats: typeof relations_page_blocks_stats_block_stats;
  relations_page_blocks_stats_block: typeof relations_page_blocks_stats_block;
  relations_page_blocks_district_deputies_block: typeof relations_page_blocks_district_deputies_block;
  relations_page_blocks_state_officers_block_contacts: typeof relations_page_blocks_state_officers_block_contacts;
  relations_page_blocks_state_officers_block: typeof relations_page_blocks_state_officers_block;
  relations_page_blocks_state_chairmen_block_chairmen: typeof relations_page_blocks_state_chairmen_block_chairmen;
  relations_page_blocks_state_chairmen_block: typeof relations_page_blocks_state_chairmen_block;
  relations_page_blocks_side_bar_layout_block_sections: typeof relations_page_blocks_side_bar_layout_block_sections;
  relations_page_blocks_side_bar_layout_block: typeof relations_page_blocks_side_bar_layout_block;
  relations_page_blocks_tabbed_layout_block_tabs: typeof relations_page_blocks_tabbed_layout_block_tabs;
  relations_page_blocks_tabbed_layout_block: typeof relations_page_blocks_tabbed_layout_block;
  relations_page_blocks_court_table_block_courts: typeof relations_page_blocks_court_table_block_courts;
  relations_page_blocks_court_table_block: typeof relations_page_blocks_court_table_block;
  relations_page_blocks_standard_layout_block: typeof relations_page_blocks_standard_layout_block;
  relations_page: typeof relations_page;
  relations_contact_contact_roles: typeof relations_contact_contact_roles;
  relations_contact: typeof relations_contact;
  relations_diocese_district_deputies: typeof relations_diocese_district_deputies;
  relations_diocese_diocese_meeting_schedule: typeof relations_diocese_diocese_meeting_schedule;
  relations_diocese_diocese_events: typeof relations_diocese_diocese_events;
  relations_diocese: typeof relations_diocese;
  relations_event: typeof relations_event;
  relations_project: typeof relations_project;
  relations_charity: typeof relations_charity;
  relations_fundraiser: typeof relations_fundraiser;
  relations_local_court_court_meeting_schedule: typeof relations_local_court_court_meeting_schedule;
  relations_local_court_court_events: typeof relations_local_court_court_events;
  relations_local_court_court_projects: typeof relations_local_court_court_projects;
  relations_local_court_court_charities: typeof relations_local_court_court_charities;
  relations_local_court_court_fundraisers: typeof relations_local_court_court_fundraisers;
  relations_local_court_court_newsletters: typeof relations_local_court_court_newsletters;
  relations_local_court: typeof relations_local_court;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_contact_form: typeof relations_contact_form;
  relations_footer_social_media_icons: typeof relations_footer_social_media_icons;
  relations_footer_links: typeof relations_footer_links;
  relations_footer: typeof relations_footer;
  relations_header_nav_items_sub_nav_sub_nav_items: typeof relations_header_nav_items_sub_nav_sub_nav_items;
  relations_header_nav_items_sub_nav: typeof relations_header_nav_items_sub_nav;
  relations_header_nav_items: typeof relations_header_nav_items;
  relations_header: typeof relations_header;
};

declare module "@payloadcms/db-vercel-postgres/types" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
